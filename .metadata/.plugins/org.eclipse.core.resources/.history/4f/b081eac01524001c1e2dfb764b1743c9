#include <iostream>
using namespace std;

class Parent
{
public:
	Parent(){
		cout << "Constructor of parent class" << endl;
	}
	~Parent(){
			cout << "Deconstructor of parent class" << endl;
		}
};

class Child : public Parent
{
public:
	Child(){
		cout << "Constructor of child class" << endl;
	}
	~Child(){
		cout << "Deconstructor of child class" << endl;
	}
};
void swap (int &a, int &b){
	int temp = a;
	a = b;
	b = temp;
}
void insertionSort(int a[], int array_size)
{
	int i, j, last;
	for(int i = 1; i < array_size; i++)
	{
		last = a[i];
		j = i;
		while((j>0)&&(a[j-1]>last))
		{
			a[j] = a[j-1];
			j--;
		}
		a[j] = last;
	}
}
void selectionSort(int a[], int array_size)
{
	for(int i = 0; i<array_size; i++)
	{
		int min = i;
		for(int j = i; j<array_size;j++)
		{
			if(a[min] > a[j])
				min = j;
		}
		swap(a[i],a[min]);
	}
}
int main()
{
	Child a;
	int c[5] = {4, 3, 2, 10, 1};
	int array_size = *(&c+1) - c;
	selectionSort(c, array_size);
	for(int i = 0; i < array_size; i++)
	{
		cout << c[i] << " ";
	}
	return 0;
}
